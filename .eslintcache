[{"C:\\Users\\jonathan gee\\Development\\repos\\realtime\\src\\index.js":"1","C:\\Users\\jonathan gee\\Development\\repos\\realtime\\src\\App.js":"2","C:\\Users\\jonathan gee\\Development\\repos\\realtime\\src\\reportWebVitals.js":"3","C:\\Users\\jonathan gee\\Development\\repos\\realtime\\src\\store.js":"4","C:\\Users\\jonathan gee\\Development\\repos\\realtime\\src\\reducers\\index.js":"5","C:\\Users\\jonathan gee\\Development\\repos\\realtime\\src\\actions\\index.js":"6"},{"size":672,"mtime":1610847714066,"results":"7","hashOfConfig":"8"},{"size":472,"mtime":1610847795007,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1607317778145,"results":"10","hashOfConfig":"8"},{"size":315,"mtime":1610846888814,"results":"11","hashOfConfig":"8"},{"size":6379,"mtime":1610846988727,"results":"12","hashOfConfig":"8"},{"size":6170,"mtime":1610842957415,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1crkexl",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"20"},"C:\\Users\\jonathan gee\\Development\\repos\\realtime\\src\\index.js",[],"C:\\Users\\jonathan gee\\Development\\repos\\realtime\\src\\App.js",[],"C:\\Users\\jonathan gee\\Development\\repos\\realtime\\src\\reportWebVitals.js",[],["29","30"],"C:\\Users\\jonathan gee\\Development\\repos\\realtime\\src\\store.js",[],"C:\\Users\\jonathan gee\\Development\\repos\\realtime\\src\\reducers\\index.js",["31"],"import Logger from 'js-logger';\r\nimport { combineReducers } from 'redux';\r\nimport {\r\n    RECIEVE_STATIONS,\r\n    RECIEVE_TRAIN_COUNT,\r\n    RECIEVE_RTE,\r\n    RECIEVE_TRIP_PLANNING,\r\n    SHOW_SORT_SELECTION,\r\n    SET_STARTING_ABBR,\r\n    SET_DESTINATION_ABBR,\r\n    SET_TRIP_PLANNER_DETAILS,\r\n    RECIEVE_ROUTES,\r\n} from '../actions/';\r\n\r\nconst rtdInitialState = {\r\n    entities: {\r\n        estimate: {\r\n            id: {\r\n                bikeflag: '',\r\n                color: '',\r\n                delay: '',\r\n                direction: '',\r\n                hexcolor: '',\r\n                length: '',\r\n                minutes: '',\r\n                platform: '',\r\n            },\r\n        },\r\n        etd: {\r\n            id: {\r\n                abbreviation: '',\r\n                destination: '',\r\n                estimate: ['id'],\r\n                limited: '',\r\n            },\r\n        },\r\n        response: {\r\n            id: {\r\n                '@id': '',\r\n                date: '',\r\n                message: '',\r\n                station: 'id',\r\n                time: '',\r\n                uri: 'id',\r\n            },\r\n        },\r\n        station: {\r\n            id: {\r\n                abbr: '',\r\n                name: '',\r\n                etd: ['id'],\r\n            },\r\n        },\r\n        uri: {\r\n            id: { '#data-selection': '' },\r\n        },\r\n    },\r\n    result: 'id',\r\n};\r\n\r\nfunction rtd(state = rtdInitialState, action) {\r\n    switch (action.type) {\r\n        case RECIEVE_RTE:\r\n            return { ...action.data };\r\n        default:\r\n            return { ...state };\r\n    }\r\n}\r\n\r\nconst statationsInitialState = {\r\n    entities: {\r\n        stations: {\r\n            '12TH': {\r\n                abbr: '',\r\n                address: '',\r\n                city: '',\r\n                county: '',\r\n                gtfs_latitude: '',\r\n                gtfs_longitude: '',\r\n                id: '',\r\n                name: '',\r\n                state: '',\r\n                zipcode: '',\r\n            },\r\n        },\r\n    },\r\n    result: ['12TH'],\r\n};\r\n\r\nfunction stations(state = statationsInitialState, action) {\r\n    // Logger.info(`reducer::stations`);\r\n\r\n    switch (action.type) {\r\n        case RECIEVE_STATIONS:\r\n            const stations = action.stations;\r\n            return { ...stations };\r\n        default:\r\n            return { ...state };\r\n    }\r\n}\r\n\r\nconst trainCountInitailState = {\r\n    result: 'id',\r\n    entities: {\r\n        traincount: {\r\n            id: {\r\n                date: '',\r\n                message: '',\r\n                time: '',\r\n                traincount: 'unknown',\r\n                uri: 'id',\r\n            },\r\n        },\r\n        uri: {\r\n            id: { '#data-selection': '' },\r\n        },\r\n    },\r\n};\r\nfunction traincount(state = trainCountInitailState, action) {\r\n    switch (action.type) {\r\n        case RECIEVE_TRAIN_COUNT:\r\n            return { ...action.data };\r\n        default:\r\n            return { ...state };\r\n    }\r\n}\r\n\r\nfunction sortSelection(state = '', action) {\r\n    switch (action.type) {\r\n        case SHOW_SORT_SELECTION:\r\n            return action.selection === '' ? 'named' : action.selection;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction destinationAbbr(state = '', action) {\r\n    switch (action.type) {\r\n        case SET_DESTINATION_ABBR:\r\n            return action.abbr;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction startingAbbr(state = '', action) {\r\n    switch (action.type) {\r\n        case SET_STARTING_ABBR:\r\n            return action.abbr;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const defaultTripPlannerTripObject = {\r\n    '@origin': '12TH',\r\n    '@destination': '12TH',\r\n    '@fare': '',\r\n    '@origTimeMin': '',\r\n    '@origTimeDate': '',\r\n    '@destTimeMin': '',\r\n    '@destTimeDate': '',\r\n    '@clipper': '',\r\n    '@tripTime': '',\r\n    '@co2': '',\r\n    fares: {},\r\n    leg: ['legId'],\r\n};\r\nconst tripPlannerInitialState = {\r\n    entities: {\r\n        request: {\r\n            requestId: {\r\n                trip: ['tripId'],\r\n            },\r\n        },\r\n        fare: {},\r\n        fares: {},\r\n        leg: {\r\n            legId: {\r\n                '@bikeflag': '',\r\n                '@destTimeDate': '',\r\n                '@destTimeMin': '',\r\n                '@destination': '12TH',\r\n                '@line': '',\r\n                '@load': '',\r\n                '@order': '',\r\n                '@origTimeDate': '',\r\n                '@origTimeMin': '',\r\n                '@origin': '12TH',\r\n                '@trainHeadStation': '',\r\n                '@trainId': '',\r\n                '@trainIdx': '',\r\n                '@transfercode': '',\r\n            },\r\n        },\r\n        response: {\r\n            responseId: {\r\n                schedule: 'scheduleId',\r\n            },\r\n        },\r\n        schedule: {\r\n            scheduleId: {\r\n                after: '',\r\n                before: '',\r\n                date: '',\r\n                request: 'requestId',\r\n                time: '',\r\n            },\r\n        },\r\n        trip: {\r\n            tripId: { ...defaultTripPlannerTripObject },\r\n        },\r\n    },\r\n    result: 'responseId',\r\n};\r\n\r\nfunction tripplanner(state = tripPlannerInitialState, action) {\r\n    switch (action.type) {\r\n        case RECIEVE_TRIP_PLANNING:\r\n            return { ...action.data };\r\n        default:\r\n            return { ...state };\r\n    }\r\n}\r\n\r\nfunction tripPlannerDetailsId(state = 'tripId', action) {\r\n    switch (action.type) {\r\n        case SET_TRIP_PLANNER_DETAILS:\r\n            return action.tripId;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst routesInitialState = {\r\n    entities: {\r\n        route: {\r\n            abbr: '',\r\n            color: '',\r\n            hexcolor: '',\r\n            name: '',\r\n            number: '',\r\n            routeID: '',\r\n        },\r\n        routes: {\r\n            id: ['id'],\r\n        },\r\n    },\r\n    result: 'id',\r\n};\r\n\r\nfunction routes(state = routesInitialState, action) {\r\n    switch (action.type) {\r\n        case RECIEVE_ROUTES:\r\n            return { ...action.routes };\r\n        default:\r\n            return { ...state };\r\n    }\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n    rtd,\r\n    routes,\r\n    stations,\r\n    traincount,\r\n    sortSelection,\r\n    destinationAbbr,\r\n    startingAbbr,\r\n    tripplanner,\r\n    tripPlannerDetailsId,\r\n});\r\n\r\nexport default rootReducer;\r\n","C:\\Users\\jonathan gee\\Development\\repos\\realtime\\src\\actions\\index.js",["32"],"import Logger from 'js-logger'\r\nimport {normalize, schema} from 'normalizr';\r\n\r\nexport const GET_ETA = 'get eta';\r\nexport const GET_STATIONS = 'get stations';\r\nexport const RECIEVE_STATIONS = 'receive stations';\r\nexport const RECIEVE_TRAIN_COUNT = 'recieve train count';\r\nexport const RECIEVE_RTE = 'receieve real time estimate';\r\nexport const RECIEVE_TRIP_PLANNING = 'receieve trip planning';\r\nexport const RECIEVE_ROUTES = 'recieve routes';\r\nexport const SET_STARTING_ABBR = 'set starting abbr';\r\nexport const SET_DESTINATION_ABBR = 'set destination abbr';\r\nexport const SET_TRIP_PLANNER_DETAILS = 'set trip planner details';\r\nexport const SET_TRIP_PLANNER_LEG_IDS = 'set trip planner leg ids;';\r\n\r\nexport const SHOW_SORT_SELECTION = 'show sort selection';\r\n\r\nexport function getETA(station)\r\n{\r\n\treturn {type:GET_ETA, station};\r\n}\r\nexport function getStations()\r\n{\r\n\treturn {type:GET_STATIONS};\r\n}\r\nexport function recieveRoutes(routes)\r\n{\r\n\treturn {type:RECIEVE_ROUTES,routes};\r\n}\r\nexport function recieveStations(stations)\r\n{\r\n\treturn { type:RECIEVE_STATIONS,stations};\r\n}\r\nexport function recieveTrainCount(data)\r\n{\r\n\treturn { type:RECIEVE_TRAIN_COUNT,data};\r\n}\r\nexport function recieveRTE(data)\r\n{\r\n\treturn { type: RECIEVE_RTE, data};\r\n}\r\nexport function recieveTripPlanning(data)\r\n{\r\n\treturn {type:RECIEVE_TRIP_PLANNING, data};\r\n}\r\nexport function showSortSelection(selection)\r\n{\r\n\treturn {type: SHOW_SORT_SELECTION,selection};\r\n}\r\nexport function setStartingAbbr(abbr)\r\n{\r\n\treturn {type: SET_STARTING_ABBR, abbr}\r\n}\r\nexport function setDestinationAbbr(abbr)\r\n{\r\n\treturn {type:SET_DESTINATION_ABBR, abbr}\r\n}\r\nexport function setTripPlannerDetails(tripId)\r\n{\r\n\treturn {type:SET_TRIP_PLANNER_DETAILS,tripId};\r\n}\r\nexport function setTripPlannerLegIds(legIds)\r\n{\r\n\treturn {type:SET_TRIP_PLANNER_LEG_IDS,legIds};\r\n}\r\n\r\nconst DEV_KEY = 'MW9S-E7SL-26DU-VV8V';\r\n\r\nexport function fetchRoutes()\r\n{\r\n\treturn dispatch =>\r\n\t{\r\n\t\treturn fetch(`http://api.bart.gov/api/route.aspx?cmd=routes&key=${DEV_KEY}&json=y`)\r\n\t\t\t.then( response => response.json() )\r\n\t\t\t.then( json =>\r\n\t\t\t{\r\n\t\t\t\tconst routeSchema = new schema.Entity('route',undefined,{idAttribute:item => item.routeID});\r\n\t\t\t\tconst routesSchema = new schema.Entity('routes',{route:[routeSchema]},{idAttribute:item => 'id'});\r\n\t\t\t\tconst normalized = normalize(json.root.routes,routesSchema);\r\n\r\n\t\t\t\tdispatch(recieveRoutes(normalized));\r\n\t\t\t});\r\n\t}\r\n}\r\n\r\nexport function fetchStations()\r\n{\r\n\treturn dispatch =>\r\n\t{\r\n\t\treturn fetch(`http://api.bart.gov/api/stn.aspx?cmd=stns&key=${DEV_KEY}&json=y`)\r\n\t\t\t.then( response => response.json() )\r\n\t\t\t.then( json =>\r\n\t\t\t{\r\n\t\t\t\tconst stationSchema = new schema.Entity('stations');\r\n\t\t\t\t// add id.\r\n\t\t\t\tconst idAdded = json.root.stations.station.map(item => { return {...item,id:item.abbr}} );\r\n\t\t\t\t// normalize the station data.\r\n\t\t\t\tconst normalized = normalize(idAdded, [stationSchema]);\r\n\r\n\t\t\t\tdispatch(recieveStations(normalized));\r\n\t\t\t});\r\n\t}\r\n}\r\n\r\nexport function fetchTrainCount()\r\n{\r\n\treturn dispatch =>\r\n\t{\r\n\t\treturn fetch(`http://api.bart.gov/api/bsa.aspx?cmd=count&key=${DEV_KEY}&json=y`)\r\n\t\t\t.then( response => response.json() )\r\n\t\t\t.then( json => {\r\n\t\t\t\tconst uriSchema = new schema.Entity('uri',undefined,{idAttribute: uri => 'uriId'});\r\n\t\t\t\tconst trainCountSchema = new schema.Entity('traincount',{uri:uriSchema},{idAttribute:train => train.time});\r\n\t\t\t\tconst data = normalize(json.root,trainCountSchema);\r\n\t\t\t\t\r\n\t\t\t\tdispatch(recieveTrainCount(data));\r\n\t\t\t} );\r\n\t}\r\n}\r\n\r\nexport function fetchRealTimeEstimates(station)\r\n{\r\n\treturn (dispatch) =>\r\n\t{\r\n\t\treturn fetch(`http://api.bart.gov/api/etd.aspx?cmd=etd&orig=${station}&key=${DEV_KEY}&json=y`)\r\n\t\t\t.then( response => response.json() )\r\n\t\t\t.then( json => {\r\n\r\n\t\t\t\tconst estimateSchema = new schema.Entity('estimate',undefined,{idAttribute: estimate => \r\n\t\t\t\t{\r\n\t\t\t\t\tconst {color,bikeflag,delay,direction,hexcolor,length,minutes,platform} = estimate;\r\n\r\n\t\t\t\t\treturn `${color}-${bikeflag}-${delay}-${direction}-${hexcolor}-${length}-${minutes}-${platform}`;\r\n\t\t\t\t} });\r\n\t\t\t\tconst uriSchema = new schema.Entity('uri',undefined,{idAttribute: uri => 'uriId'});\r\n\t\t\t\tconst etdSchema = new schema.Entity('etd',{estimate:[estimateSchema]},{idAttribute: etd => etd.abbreviation})\r\n\t\t\t\tconst stationSchema = new schema.Entity('station',{etd:[etdSchema]},{idAttribute: station => station.abbr });\r\n\t\t\t\tconst responseSchema = new schema.Entity('response',{uri:uriSchema,station:[stationSchema]},{idAttribute:response => response.time});\r\n\t\t\t\tconst normalized = normalize(json.root, responseSchema);\r\n\r\n\t\t\t\tdispatch(recieveRTE(normalized));\r\n\t\t\t} );\r\n\t}\r\n}\r\n\r\nexport function fetchTripPlanning()\r\n{\r\n\treturn (dispatch,getState) =>\r\n\t{\r\n\t\tconst {startingAbbr,destinationAbbr} = getState();\r\n\r\n\t\tif(startingAbbr && startingAbbr.length > 0 && destinationAbbr && destinationAbbr.length > 0)\r\n\t\t{\r\n\t\t\treturn fetch(`http://api.bart.gov/api/sched.aspx?cmd=depart&orig=${startingAbbr}&dest=${destinationAbbr}&date=today&time=now&key=${DEV_KEY}&b=1&a=4&json=y`)\r\n\t\t\t.then( response => response.json() )\r\n\t\t\t.then( json => {\r\n\r\n\t\t\t\t// start to normalize the json response.\r\n\t\t\t\tconst fareSchema = new schema.Entity('fare',undefined,{idAttribute: value => value['@name']});\r\n\t\t\t\tconst faresSchema = new schema.Entity('fares',{fare:[fareSchema]},{idAttribute: value => `${value['@level']}-${value.fare.length}`});\r\n\t\t\t\tconst legSchema = new schema.Entity('leg',undefined,{idAttribute: value => value['@origTimeMin'] + value['@destTimeMin']});\r\n\t\t\t\tconst tripSchema = new schema.Entity('trip',{fares:faresSchema,leg:[legSchema]},{idAttribute: value => `${value['@origTimeMin']}-${value['@destTimeMin']}`});\r\n\t\t\t\tconst requestSchema = new schema.Entity('request',{trip:[tripSchema]},{idAttribute: value => 'requestId'});\r\n\t\t\t\tconst scheduleSchema = new schema.Entity('schedule',{request:requestSchema},{idAttribute: value => `${value.time}-${value.date}`});\r\n\t\t\t\tconst responseSchema = new schema.Entity('response',{schedule:scheduleSchema},{idAttribute: value => `${value.origin}-${value.destination}`});\r\n\r\n\t\t\t\tconst normalized = normalize(json.root, responseSchema);\r\n\r\n\t\t\t\tdispatch(recieveTripPlanning(normalized));\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n}",{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":1,"column":8,"nodeType":"39","messageId":"40","endLine":1,"endColumn":14},{"ruleId":"37","severity":1,"message":"38","line":1,"column":8,"nodeType":"39","messageId":"40","endLine":1,"endColumn":14},"no-native-reassign",["41"],"no-negated-in-lhs",["42"],"no-unused-vars","'Logger' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]